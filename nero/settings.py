"""
Django settings for nero project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from datetime import timedelta

# pylint: disable=consider-using-f-string
from pathlib import Path

from corsheaders.defaults import default_headers
from decouple import Csv, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())

CORS_ORIGIN_REGEX_WHITELIST = config(
    "CORS_ORIGIN_REGEX_WHITELIST", default="", cast=Csv()
)

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-ignore-credentials",
]

CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="", cast=Csv())

# Application definition

SHARED_APPS = (
    "django_tenants",  # mandatory
    "apps.tenants",  # you must list the app where your tenant model resides in
    "django.contrib.contenttypes",
    # everything below here is optional
    "corsheaders",
    "apps.main_auth",
)

TENANT_APPS = (
    # The following Django contrib apps must be in TENANT_APPS
    "django.contrib.contenttypes",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "storages",
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt.token_blacklist",
    # your tenant-specific apps
    "apps.users",
    "apps.catalog",
    "apps.coupon",
    "apps.orders",
    "apps.payments",
    "apps.paypal",
    "apps.cart",
    "apps.blog",
    "apps.pages",
    "apps.subscription",
    "apps.twocheckout",
)

INSTALLED_APPS = list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]

TENANT_MODEL = "tenants.Tenant"  # app.Model

TENANT_DOMAIN_MODEL = "tenants.Domain"  # app.Model

PUBLIC_SCHEMA_URLCONF = "nero.urls_public"  # routing for public schema

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "apps.common.backends.auth.ProfileTypeUsernameorEmail",
    "django.contrib.auth.backends.ModelBackend",
    "apps.common.backends.auth.KeycloakBackend",
]

ROOT_URLCONF = "nero.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nero.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE"),
        "HOST": config("DB_HOST"),
        "NAME": config("DB_NAME"),
        "PASSWORD": config("DB_PASSWORD"),
        "PORT": config("DB_PORT"),
        "USER": config("DB_USER"),
    }
}

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = False

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django storages
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default=None)

AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default=None)

AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", default=None)

AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME

AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}

AWS_STATIC_LOCATION = "static"

AWS_DEFAULT_ACL = None

AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="eu-west-2")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)

STATICFILES_STORAGE = "apps.common.backends.storage.StaticStorage"

DEFAULT_FILE_STORAGE = "apps.common.backends.storage.MediaStorage"

MULTITENANT_RELATIVE_MEDIA_ROOT = ""

AUTH_USER_MODEL = "users.User"

# Keycloak
KEYCLOAK_SERVER_URL = config("KEYCLOAK_SERVER_URL", None)

KEYCLOAK_CLIENT_ID = config("KEYCLOAK_CLIENT_ID", None)

KEYCLOAK_REALM = config("KEYCLOAK_REALM", None)

KEYCLOAK_CLIENT_SECRET = config("KEYCLOAK_CLIENT_SECRET", None)

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "apps.common.permissions.IsSubscriptionActive",
        "rest_framework.permissions.IsAuthenticated",
        "apps.common.permissions.IsEmailVerified",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "apps.common.authentication.CookieJWTAuthentication",
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
        "apps.common.authentication.KeycloakTokenAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "apps.common.pagination.CustomPagination",
    "PAGE_SIZE": 10,
    "DATETIME_FORMAT": "iso-8601",
    "DATE_FORMAT": "iso-8601",
    "TIME_FORMAT": "iso-8601",
    "SEARCH_PARAM": "q",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "login": "6/hour",
        "email_send_code": "6/hour",
        "email_confirm_code": "6/hour",
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "UPDATE_LAST_LOGIN": True,
    # custom
    "AUTH_COOKIE": "access_token",  # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_REFRESH": "refresh_token",
    "AUTH_COOKIE_DOMAIN": config(
        "AUTH_COOKIE_DOMAIN", default=None
    ),  # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_SECURE": False,  # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_HTTP_ONLY": True,  # Http only cookie flag.It's not fetch by javascript.
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    "AUTH_COOKIE_SAMESITE": "Lax",  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
}

# Celery
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://redis:6379")

# mail
AWS_SES_ACCESS_KEY_ID = config("AWS_SES_ACCESS_KEY_ID", default=None)

AWS_SES_SECRET_ACCESS_KEY = config("AWS_SES_SECRET_ACCESS_KEY", default=None)

AWS_SES_REGION = config("AWS_SES_REGION", default="us-east-1")

MAIL_SERVER_URL = config("MAIL_SERVER_URL", default="http://web:8000/api/v1/")

MAIL_SENDER_EMAIL = config("MAIL_SENDER_EMAIL", default=None)

TENANT_DEFAULT_DOMAIN_SUFFIX = config("TENANT_DEFAULT_DOMAIN_SUFFIX", default=None)

TENANT_DEFAULT_DOMAIN_PREFIX = config("TENANT_DEFAULT_DOMAIN_PREFIX", default=None)

# frontend settings
WEBAPP_PROTOCOL = config("WEBAPP_PROTOCOL", default="http")

WEBAPP_VERIFY_EMAIL_URL = config("WEBAPP_VERIFY_EMAIL_URL", default=None)

WEBAPP_CUSTOMER_EMAIL_CHANGE_CONFIRM_URL = config(
    "WEBAPP_CUSTOMER_EMAIL_CHANGE_CONFIRM_URL", default=None
)

WEBAPP_ADMIN_EMAIL_CHANGE_CONFIRM_URL = config(
    "WEBAPP_ADMIN_EMAIL_CHANGE_CONFIRM_URL", default=None
)

WEBAPP_CUSTOMER_PASSWORD_RESET_CONFIRM_URL = config(
    "WEBAPP_CUSTOMER_PASSWORD_RESET_CONFIRM_URL", default=None
)

WEBAPP_ADMIN_PASSWORD_RESET_CONFIRM_URL = config(
    "WEBAPP_ADMIN_PASSWORD_RESET_CONFIRM_URL", default=None
)

ORDER_ATTACHMENT_MAX_SIZE = config(
    "ORDER_ATTACHMENT_MAX_SIZE", cast=int, default=1024 * 1024 * 5
)

ORDER_ATTACHMENT_MAX_FILES = config("ORDER_ATTACHMENT_MAX_FILES", cast=int, default=6)


# Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{CELERY_BROKER_URL}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}
# cache items for 1 hour
CACHE_TTL = 60 * 60 * 1

# Google recaptcha
GOOGLE_RECAPTCHA_API = "https://www.google.com/recaptcha/api/siteverify"
GOOGLE_RECAPTCHA_SECRET_KEY = config("GOOGLE_RECAPTCHA_SECRET_KEY")

# Paypal
PAYPAL_SUBSCRIPTION_WEBHOOK_ID = config("PAYPAL_SUBSCRIPTION_WEBHOOK_ID", default=None)
PAYPAL_CLIENT_ID = config("PAYPAL_CLIENT_ID", default=None)
PAYPAL_SECRET = config("PAYPAL_SECRET", default=None)
PAYPAL_API_BASE_URL = config(
    "PAYPAL_API_BASE_URL", default="https://api-m.paypal.com/v1"
)

# Africa's Talking
AFRICAS_TALKING_USERNAME = config("AFRICAS_TALKING_USERNAME", default=None)
AFRICAS_TALKING_API_KEY = config("AFRICAS_TALKING_API_KEY", default=None)
AFRICAS_TALKING_SENDER_ID = config("AFRICAS_TALKING_SENDER_ID", default=None)
